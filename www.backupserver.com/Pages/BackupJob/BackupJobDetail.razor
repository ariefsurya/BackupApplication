@page "/backupjobdetail"
@layout ProtectedLayout
@inject IBackupJobRepository _backupJobRepo
@inject IBackupRunnerRepository _backupRunnerRepo
@inject NavigationManager Navigation

<h3>BackupJobDetail</h3>
<div class="d-flex justify-content-between">
    <div class="d-flex fs-5 justify-content-between w-25">
        <div>
            <b>Source Server Ip</b>
            <div>
                @oTargetBackup.SourceServerIp
            </div>
        </div>
        <span><i class="bi bi-arrow-right"></i></span>
        <div>
            <b>Target Server Ip</b>
            <div>
                @oTargetBackup.TargetServerIp
            </div>
        </div>
    </div>
    <div class="d-flex fs-5 w-50">
        <Button class="me-5" @onclick="() => NavigateToEdit()"><i class="bi bi-pencil-square fs-5 me-1"></i>Edit Backup Job</Button>
        <Button @onclick="() => ApiRunBackupJobServer()"><i class="bi bi-play-fill fs-5 me-1 text-success"></i>Run Backup Now</Button>
    </div>
</div>
<div class="mb-3 border-bottom pt-2 ">
    <b>File Name</b>
    <div>@oTargetBackup.TargetFileName</div>
</div>

@if (oBackupJobDetail.IsUseScheduler && oBackupScheduler != null)
{
    <div class="mb-3 border-bottom pt-3 ">
        <b>Backup Schedule</b>
        <div>Scheduler Type : @oBackupScheduler.BackupSchedulerType</div>
        <div>Scheduler Date : @oBackupScheduler.SchedulerDateDaySet</div>
        <div>Scheduler Time : @oBackupScheduler.SchedulerClockTimeSet</div>
        <div>Scheduler Status: @oBackupScheduler.SchedulerStartDate</div>
    </div>
}

<div>
    <h5>Backup History</h5>
    <table class="border border-black rounded w-100">
        <tr class="bg-opacity-25 bg-secondary m-0 row">
            <th class="col-1 p-2">Id</th>
            <th class="col-3 p-2">Backup Job Name</th>
            <th class="col-3 p-2">Status Id</th>
            <th class="col-3 p-2">Last Backup Date</th>
            <th class="col-2 p-2">Last Backup Status</th>
        </tr>
        @if (lBackupHistory == null || lBackupHistory.Count == 0)
        {
            <tr>
                <td class="p-2">no history</td>
            </tr>
        }
        @foreach (var backupHistory in lBackupHistory)
        {
            <tr class="m-0 row">
                <td class="col-1 p-2">@backupHistory.Id</td>
                <td class="col-3 p-2">@backupHistory.BackupJobName</td>
                <td class="col-3 p-2">@backupHistory.TargetFolderPath</td>
                <td class="col-3 p-2">@backupHistory.CreatedDate</td>
                <td class="col-2 p-2">@backupHistory.BackupStatusId</td>
            </tr>
        }
    </table>
    <Pagination ActivePageNumber="@filter.iPage"
                TotalPages="(int)Math.Ceiling(Convert.ToDecimal(lBackupHistory.Count > 0 ? lBackupHistory[0].total_count : 0)/10)"
                PageChanged="OnChangePaging"
                class="d-flex justify-content-center" />
</div>

@code {
    int backupJobId = 0;
    BackupJobDTO oBackupJobDetail = new BackupJobDTO();
    TargetBackup oTargetBackup = new TargetBackup();
    BackupScheduler oBackupScheduler = new BackupScheduler();
    List<BackupHistoryDTO> lBackupHistory = new List<BackupHistoryDTO>();
    BackupFilter filter = new BackupFilter();
    bool isRunButtonDisabled = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var id = GetQueryParm("id");
            backupJobId = Int32.Parse(id);
            await FetchBackupJobDataDetail();
            await FetchBackupJobDataHistory();
        }
    }
    string GetQueryParm(string parmName)
    {
        var uriBuilder = new UriBuilder(Navigation.Uri);
        var q = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);
        return q[parmName] ?? "";
    }

    private async Task FetchBackupJobDataDetail()
    {
        var response = await _backupJobRepo.GetCompanyBackupJobDetail(backupJobId);

        if (response.Code != 200)
        {
            // SubmitErrorMessage = response.Data.ToString();
            return;
        }

        oBackupJobDetail = JsonConvert.DeserializeObject<BackupJobDTO>(response.Data.ToString());

        oTargetBackup = oBackupJobDetail.oTargetBackup;
        oBackupScheduler = oBackupJobDetail.oBackupScheduler;
        if (oBackupScheduler != null)
            oBackupScheduler.SchedulerDateDaySet = oBackupScheduler.SchedulerDateDaySet.Replace(";", " ,");
        StateHasChanged();
    }
    private async Task FetchBackupJobDataHistory()
    {
        var response = await _backupJobRepo.GetCompanyBackupJobHistory(backupJobId, filter.iPage, filter.iTake);
        isRunButtonDisabled = true;
        if (response.Code != 200)
        {
            // SubmitErrorMessage = response.Data.ToString();
            // return;
        }

        lBackupHistory = JsonConvert.DeserializeObject<List<BackupHistoryDTO>>(response.Data.ToString());
        StateHasChanged();
    }
    private async Task OnChangePaging(int newPageNumber)
    {
        await Task.Run(() => { filter.iPage = newPageNumber; });
        await FetchBackupJobDataHistory();
    }

    protected class BackupFilter
    {
        public BackupFilter()
        {
            iPage = 1;
            iTake = 10;
            search = "";
        }
        public int iPage { get; set; }
        public int iTake { get; set; }
        public string search { get; set; }
    }

    protected void NavigateToEdit()
    {
        var url = "/backupjobedit?id=" + backupJobId.ToString();
        Navigation.NavigateTo(url);
    }

    private async Task ApiRunBackupJobServer()
    {
        isRunButtonDisabled = true;
        var response = await _backupRunnerRepo.RunBackupJobServerByUser(backupJobId);

        if (response.Code != 200)
        {
            // SubmitErrorMessage = response.Data.ToString();
            Console.WriteLine("Failed Run Backup Job");
            return;
        }

        var historyjobResult = JsonConvert.DeserializeObject<BackupHistory>(response.Data.ToString());
        if (historyjobResult.Id > 0)
        {
            Console.WriteLine("Success Run Backup Job");
        }
        else
            Console.WriteLine("Failed Run Backup Job");

        await FetchBackupJobDataHistory();
    }

}
