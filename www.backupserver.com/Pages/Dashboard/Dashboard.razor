@page "/dashboard"
@layout ProtectedLayout
@inject IBackupJobRepository _backupJobRepo
@inject NavigationManager Navigation

<h3>Dashboard</h3>
<Grid TItem="BackupJobDTO"
      Class="table table-hover table-bordered table-striped"
      DataProvider="GetBackupJobDataProvider"
      AllowFiltering="true"
      AllowPaging="true"
      AllowSorting="false"
      Responsive="true">

    <GridColumn TItem="BackupJobDTO" HeaderText="Id" PropertyName="CustomerId" SortString="CustomerId" FilterTextboxWidth="50" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center">
        @context.Id
    </GridColumn>
    <GridColumn TItem="BackupJobDTO" HeaderText="Customer Name" PropertyName="CustomerName" SortString="CustomerName" FilterTextboxWidth="80">
        @context.BackupJobName
    </GridColumn>
    <GridColumn TItem="BackupJobDTO" HeaderText="Phone" PropertyName="Phone" SortString="Phone" FilterTextboxWidth="100">
        @context.StatusId
    </GridColumn>
    <GridColumn TItem="BackupJobDTO" HeaderText="Email" PropertyName="Email" SortString="Email" FilterTextboxWidth="120">
        @context.LastBackupDate
    </GridColumn>
    <GridColumn TItem="BackupJobDTO" HeaderText="Address" PropertyName="Address" SortString="Address" FilterTextboxWidth="150">
        @context.LastBackupStatus
    </GridColumn>

</Grid>

@code {
    List<BackupJobDTO> lBackupJobDTO = new List<BackupJobDTO>();
    private async Task<GridDataProviderResult<BackupJobDTO>> GetBackupJobDataProvider(GridDataProviderRequest<BackupJobDTO> request)
    {
        string sortString = "";
        SortDirection sortDirection = SortDirection.None;

        if (request.Sorting is not null && request.Sorting.Any())
        {
            // Note: Multi column sorting is not supported at this moment
            sortString = request.Sorting.FirstOrDefault()!.SortString;
            sortDirection = request.Sorting.FirstOrDefault()!.SortDirection;
        }
        var response = await _backupJobRepo.GetCompanyBackupJob(request.Filters.ToString(), request.PageNumber, request.PageSize);

        if (response.Code != 200)
        {
            // SubmitErrorMessage = response.Data.ToString();
            // return;
        }

        lBackupJobDTO = JsonConvert.DeserializeObject<List<BackupJobDTO>>(response.Data.ToString());
        return await Task.FromResult(new GridDataProviderResult<BackupJobDTO> { Data = lBackupJobDTO, TotalCount = lBackupJobDTO.Count > 0 ? lBackupJobDTO[0].total_count : 0 });
    }

}
